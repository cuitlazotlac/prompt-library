rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isCreator() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'creator' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAdmin() || (isOwner(userId) && 
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])));
      allow delete: if isAdmin();
    }

    // Prompts collection
    match /prompts/{promptId} {
      allow read: if resource.data.isPublic == true || isAdmin() || 
                   resource.data.creatorId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
                   (resource.data.creatorId == request.auth.uid);
      allow delete: if isAdmin() || 
                   (resource.data.creatorId == request.auth.uid);
    }

    // Favorites collection
    match /favorites/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to subcollections
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
} 